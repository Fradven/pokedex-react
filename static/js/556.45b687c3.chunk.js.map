{"version":3,"file":"static/js/556.45b687c3.chunk.js","mappings":"kOAgBA,EAT+B,SAAC,GAGzB,IAFHA,EAEE,EAFFA,KACAC,EACE,EADFA,SAGF,OAAO,gBACPC,UAAYF,EAAyB,UAAnB,iBADX,SAC0CC,KC6EnD,G,OA9DqC,SAAC,GAAY,IAAXE,EAAU,EAAVA,KACnC,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAU,mCAAG,oGACGC,EAAAA,EAAAA,IAAA,kBAAqBP,IADxB,OACTQ,EADS,OAGfL,EAAWK,EAAIC,MAHA,2CAAH,qDAOVC,EAAY,WACdL,GAAUD,IASd,OANAO,EAAAA,EAAAA,YAAU,WACNL,MAED,CAACN,KAIA,gCAGCE,GACD,iBAAKH,UAAU,gBAAf,WAEI,eAAGA,UAAU,cAAb,cAA6BG,EAAQU,OAErC,gBAAKb,UAAU,kBAAf,UACI,gBAAKc,IAAKX,EAAQY,QAAQC,cAAeC,IAAI,cAGjD,eAAIjB,UAAU,gBAAd,SAA+BC,KAE/B,gBAAKD,UAAU,gBAAf,SACCG,EAAQe,MAAMC,KAAI,SAACC,GAAD,OACf,cAA2BpB,UAAWoB,EAAQC,KAAKpB,KAAnD,SAA0DmB,EAAQC,KAAKpB,MAA/DmB,EAAQC,KAAKpB,YAIzB,mBAAQD,UAAU,kBAAkBsB,QAASX,EAA7C,8BAGF,gBAAKX,UAAU,oBAAf,UACE,gBAAKA,UAAU,mBAAf,UAAkC,gBAAKc,IAAKS,EAAUN,IAAI,iBAI9D,SAAC,EAAD,CAAOnB,KAAMO,EAAb,UAEA,gBAAKL,UAAU,QAAf,UACI,SAACwB,EAAA,EAAD,CAAgBvB,KAAMA,EAAMH,KAAMO,EAAOoB,UAAWd,c,gHC9ChE,IA3BA,WACI,OAAwBT,EAAAA,EAAAA,YAAxB,eAAOD,EAAP,KAAayB,EAAb,KAQMC,EAAgB,mCAAG,oGACHnB,EAAAA,EAAAA,IAAA,kBALVoB,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,KAItB,QACfrB,EADe,SAGVA,EAAIC,MAAMgB,EAAQjB,EAAIC,KAAKT,MAHjB,2CAAH,qDAUxB,OAJEW,EAAAA,EAAAA,YAAW,WACPe,MAED,KAEH,8BACC1B,GAAQ,SAAC,IAAD,CAAgBA,KAAMA,KACvB,gBAAKD,UAAU,mBAAf,UAAkC,gBAAKc,IAAKS,EAAUN,IAAI,kB,4HCHtE,EAdqC,SAAC,GAAgC,IAA9BhB,EAA6B,EAA7BA,KAAMG,EAAuB,EAAvBA,WAAY2B,EAAW,EAAXA,KAIhDC,EAAQ,mCAAG,oGACKxB,EAAAA,EAAAA,IAAA,eAAkBP,IADvB,OACPQ,EADO,OAGA,YAATsB,GAAoB3B,EAAWK,EAAIC,KAAKP,SAC/B,UAAT4B,GAAkB3B,EAAWK,EAAIC,KAAKuB,OAJ7B,2CAAH,qDAOd,OAAO,mBAAQjC,UAAWC,EAAMqB,QAASU,EAAlC,SAA6C/B,KCuBxD,EApCmC,SAAC,GAA0B,IAAxBiC,EAAuB,EAAvBA,WAAYH,EAAW,EAAXA,KAC9C,GAAwB7B,EAAAA,EAAAA,UAAS,IAAjC,eAAOmB,EAAP,KAAac,EAAb,KACA,GAAwBjC,EAAAA,EAAAA,UAAS,IAAjC,eAAOkC,EAAP,KAAaC,EAAb,KAGM9B,EAAU,mCAAG,oGACGC,EAAAA,EAAAA,IAAA,QADH,OACTC,EADS,OAGf0B,EAAQ1B,EAAIC,KAAK4B,SAHF,2CAAH,qDAelB,OATE1B,EAAAA,EAAAA,YAAU,WACNsB,EAAWE,KAEZ,CAACA,KAEJxB,EAAAA,EAAAA,YAAW,WACPL,MAED,KAED,+BACF,gBAAKP,UAAU,YAAf,SACkB,IAAhBqB,EAAKkB,OAAgB,UAAYlB,EAAKF,KAAI,SAACT,GACzC,OACI,gBAAqBV,UAAU,kBAA/B,UACI,SAAC,EAAD,CAAaC,KAAMS,EAAKT,KAAMG,WAAYiC,EAASN,KAAMA,KADnDrB,EAAKT,e,0IC/BZ,SAASuC,IACpB,OAAwBtC,EAAAA,EAAAA,UAAS,IAAjC,eAAOkC,EAAP,KAAaC,EAAb,KAGA,OACI,iCACI,eAAIrC,UAAU,YAAd,0CAEA,gBAAKA,UAAU,iBAAf,UACI,SAAC,IAAD,CAAWkC,WAAYG,EAASN,KAP/B,eAUL,gBAAK/B,UAAU,UAAf,SACsB,IAAhBoC,EAAKG,QACL,gBAAKvC,UAAU,oBAAf,UACE,UAAC,IAAD,CAAUyC,QAAQ,OAAOC,UAAU,EAAOC,OAAK,EAA/C,WACI,SAAC,SAAD,WACI,SAAC,IAAD,OAEJ,SAAC,SAAD,WACI,SAAC,IAAD,OAEJ,SAAC,SAAD,WACI,SAAC,IAAD,WAIVP,EAAKjB,KAAI,SAACT,GAAD,OACX,SAAC,IAAD,CAAaT,KAAMS,EAAKP,QAAQF,MAAWS,EAAKP,QAAQF,gB","sources":["component/Popup.tsx","component/ListPokemon.tsx","component/RandomSelector.tsx","component/ButtonFetch.tsx","component/TypeFetch.tsx","pages/Home.tsx"],"sourcesContent":["import React from 'react';\nimport \"../style/popup.scss\"\n\ninterface Props {\n    show: boolean\n}\n\nconst Popup: React.FC<Props> = ({\n    show,\n    children\n}) => {\n\n  return <div \n  className={!show ?\"visible hidden\" : \"visible\"}>{children}</div>;\n}\n\nexport default Popup;\n","import React, { useState, useEffect } from 'react'\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\nimport IndividualPage from './IndividualPage'\nimport Popup from './Popup'\nimport '../style/ListPokemon.scss'\n\ninterface TypeArray {\n    type: {name: string},\n    element: {}\n}\n\ninterface Props {\n    name?: string,\n}\n\ninterface Pokemon {\n    id: number,\n    sprites: any,\n    types: Array<TypeArray>\n}\n\n\n/**\n * get a pokemon name and fetch their info from api to display in a card\n * @param name: string \n * @returns card diplaying info about pokemon\n */\nconst ListPokemon: React.FC<Props> = ({name}) => {\n    const [pokemon, setPokemon] = useState<Pokemon>() //data on a single pokemon\n    const [popup, setPopup] = useState(false)\n\n    //fetching data from individual page of pokmeon\n    const getPokemon = async() => {\n        const res = await axios.get(`pokemon/${name}`)\n\n        setPokemon(res.data);\n    }\n    \n    //Pop-up on/off\n    const popupOpen = () => {\n        setPopup(!popup)\n    }\n\n    useEffect(() => {\n        getPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [name])\n\n    \n    return (\n        <>\n        {/* ? : to wait for response for the data*/}\n\n        {pokemon ? \n        <div className='pokemon__card'>\n\n            <p className=\"pokemon__id\">#{pokemon.id}</p>\n\n            <div className=\"pokemon__sprite\">\n                <img src={pokemon.sprites.front_default} alt='sprite'/>\n            </div>\n\n            <h3 className=\"pokemon__name\">{name}</h3>\n\n            <div className=\"pokemon__type\">\n            {pokemon.types.map((element : {type: {name: string}}) =>\n                <p key={element.type.name} className={element.type.name}>{element.type.name}</p>\n                )}\n            </div>\n\n            <button className=\"pokemon__detail\" onClick={popupOpen}>More Details</button>\n\n        </div> \n        : <div className=\"pokemon__load-ctn\">\n            <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n        </div>\n            } \n\n        <Popup show={popup}>\n\n        <div className=\"popup\">\n            <IndividualPage name={name} show={popup} openPopup={popupOpen} />\n        </div>\n        </Popup>\n        \n        </>\n    )\n}\n\nexport default ListPokemon\n","import React, { useState, useEffect } from 'react';\nimport IndividualPage from './IndividualPage';\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\n\n/**\n * Create a random number to select a pokemon and fetch pokemon from the api info\n * @returns individualPage with a random pokemon\n */\nfunction RandomSelector() {\n    const [name, setName] = useState()\n\n    //generate a random number between 1 and 810\n    const randomNumber = () => {\n        let x = Math.floor((Math.random() * 810) + 1)\n        return x\n    }\n    //fetch inforamtion from a random pokemon \n    const getRandomPokemon = async() => {\n        const res = await axios.get(`pokemon/${randomNumber()}`)\n\n        if (res && res.data) setName(res.data.name)\n    }\n\n    useEffect (() => {\n        getRandomPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  return (\n    <>\n    {name ?  <IndividualPage name={name}/>\n          : <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>}\n    </>\n  )\n}\n\nexport default RandomSelector;\n","import React from 'react';\nimport { axios } from '../javascript/axios';\n\ninterface Props {\n    name: string\n    setPokemon: any\n    item: string\n}\n\n/**\n * fetch data depending on the appropiate page from the api\n * @param param0 \n * @returns appropriate data page\n */\nconst ButtonFetch: React.FC<Props> = ({ name, setPokemon, item }) => {\n    /**\n     * fetch data in the appropriate given page set up by item\n     */\n    const loadList = async() => {\n        const res = await axios.get(`type/${name}`)\n\n        if (item === \"pokemon\") setPokemon(res.data.pokemon)\n        if (item === \"moves\") setPokemon(res.data.moves)\n    }\n\n    return <button className={name} onClick={loadList}>{name}</button>;\n}\n\nexport default ButtonFetch;\n","import React, { useState, useEffect } from 'react';\nimport { axios } from '../javascript/axios.js'\nimport ButtonFetch from '../component/ButtonFetch';\n\ninterface Props {\n    setTopList: React.Dispatch<React.SetStateAction<never[]>>\n    item: string\n}\n\n/**\n * fetch list of types and dipley them as buttons\n */\nconst TypeFetch: React.FC<Props> = ({ setTopList, item }) => {\n    const [type, setType] = useState([])\n    const [list, setList] = useState([])\n\n\n    const getPokemon = async() => {\n        const res = await axios.get(`type`)\n\n        setType(res.data.results);\n    }\n\n    useEffect(() => {\n        setTopList(list)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [list])\n\n    useEffect (() => {\n        getPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  return (\n      <>\n    <div className=\"type-page\">\n    {(type.length === 0) ? 'loading' : type.map((data: { name: string; })=> {\n        return (\n            <div key={data.name} className=\"type-page__type\">\n                <ButtonFetch name={data.name} setPokemon={setList} item={item} />\n\n            </div>\n        )\n    })}\n</div>\n    </>\n  )\n}\n\nexport default TypeFetch;\n","import React, { useState } from 'react';\nimport TypeFetch from '../component/TypeFetch';\nimport ListPokemon from '../component/ListPokemon';\nimport Carousel from 'react-bootstrap/Carousel';\nimport RandomSelector from '../component/RandomSelector';\n\nexport default function Home() {\n    const [list, setList] = useState([])\n    const item = \"pokemon\"\n\n    return (\n        <>\n            <h2 className='page-name'>Select a Type of Pok√©mon</h2>\n            \n            <div className=\"type-container\">\n                <TypeFetch setTopList={setList} item={item} />\n            </div>\n            \n            <div className=\"pokemon\">\n                {(list.length === 0) \n                ? <div className=\"pokemon__carousel\">\n                    <Carousel variant=\"dark\" controls={false} touch>\n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                    </Carousel>\n                    </div>\n                : list.map((data: { pokemon: any, name: string; })=> \n                <ListPokemon name={data.pokemon.name} key={data.pokemon.name} />\n                )}\n            </div>\n        </>\n    )}\n"],"names":["show","children","className","name","useState","pokemon","setPokemon","popup","setPopup","getPokemon","axios","res","data","popupOpen","useEffect","id","src","sprites","front_default","alt","types","map","element","type","onClick","loading","IndividualPage","openPopup","setName","getRandomPokemon","Math","floor","random","item","loadList","moves","setTopList","setType","list","setList","results","length","Home","variant","controls","touch"],"sourceRoot":""}