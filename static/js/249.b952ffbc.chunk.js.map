{"version":3,"file":"static/js/249.b952ffbc.chunk.js","mappings":"8IAsDA,UA5CwC,SAAC,GAMlC,IALLA,EAKI,EALJA,YACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEA,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAaC,EAAAA,EAAAA,QAAuB,MAiC1C,OAnBAC,EAAAA,EAAAA,YAAU,WACJP,GAAeG,IACjBN,IACAO,GAAe,MAEhB,CAACP,EAAaG,EAAaG,KAG9BI,EAAAA,EAAAA,YAAU,WAER,IAAMC,EAAW,WArBnB,IAAkBC,GAsBTX,GAAaC,KAtBJU,EAsB4BJ,GApBnCK,SAIFD,EAAIC,QAAQC,wBAAwBC,QAAUC,OAAOC,cAiBxDjB,KAIJ,OADAkB,SAASC,iBAAiB,SAAUR,GAC7B,kBAAMO,SAASE,oBAAoB,SAAUT,MACnD,CAACX,EAAaC,EAAWC,KAErB,gBAAKmB,UAAU,UAAUT,IAAKJ,EAA9B,SAA2CJ","sources":["component/InfiniteScroll.tsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\n\ntype Props = {\n  onBottomHit: () => void; //function that will activate at end of the use ref <div>\n  isLoading: boolean; //check for loading\n  hasMoreData: boolean; //check for more data\n  loadOnMount: boolean; //true to load data on page load\n};\n\n\nconst InfiniteScroll: React.FC<Props> = ({\n  onBottomHit,\n  isLoading,\n  hasMoreData,\n  loadOnMount,\n  children,\n}) => {\n  const [initialLoad, setInitialLoad] = useState(true);\n  const contentRef = useRef<HTMLDivElement>(null); //if the element of the ref to be > then null\n\n  //return a boolean depending if ref is null or not\n  function isBottom(ref: React.RefObject<HTMLDivElement>) {\n    //if ref is null return false\n    if (!ref.current) {\n      return false;\n    }\n    //if ref is at the bottom return true\n    return ref.current.getBoundingClientRect().bottom <= window.innerHeight;\n  }\n  \n\n  //on intial laod, return to top of page and call function linked to onBottomHit() to load the data for the first time\n  useEffect(() => {\n    if (loadOnMount && initialLoad) {\n      onBottomHit();\n      setInitialLoad(false);\n    }\n  }, [onBottomHit, loadOnMount, initialLoad]);\n\n  //add an event listener for scrolling, call onBottomHit() once the user reach the bottom and removre the event listener when done\n  useEffect(() => {\n    //check if not loading, has more data and has reach bottom => activate onBottomHit()\n    const onScroll = () => {\n      if (!isLoading && hasMoreData && isBottom(contentRef)) {\n        onBottomHit();\n      }\n    };\n    document.addEventListener('scroll', onScroll); //listen to scroll so that onScroll can get data for isBottom()\n    return () => document.removeEventListener('scroll', onScroll); //remove listener (don't know why yet)\n  }, [onBottomHit, isLoading, hasMoreData]);\n\n  return <div className='pokemon' ref={contentRef}>{children}</div>;\n};\n\nexport default InfiniteScroll\n"],"names":["onBottomHit","isLoading","hasMoreData","loadOnMount","children","useState","initialLoad","setInitialLoad","contentRef","useRef","useEffect","onScroll","ref","current","getBoundingClientRect","bottom","window","innerHeight","document","addEventListener","removeEventListener","className"],"sourceRoot":""}