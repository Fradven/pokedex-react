{"version":3,"file":"static/js/399.455e4ae9.chunk.js","mappings":"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","sources":["component/Popup.tsx","component/ListPokemon.tsx","pages/InfiniteList.tsx","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport \"../style/popup.scss\"\n\ninterface Props {\n    show: boolean\n    setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst Popup: React.FC<Props> = ({\n    show,\n    setShow,\n    children\n}) => {\n\n  //close popup\n  const closePopup = () => {\n    setShow(show = false)\n  }\n\n  /**\n   * detect key press and handle key element\n   * @param e \n   */\n  const handleKeyPress = (e: KeyboardEvent) => {\n    //@ts-ignore\n    if (e.code === \"Escape\") setShow(show = false); //on \"Escape\" close the popup\n    //@ts-ignore\n    if (e.code === \"Enter\") e.preventDefault(); // prevent \"Enter\" from opening and closing Individual page\n  };\n\n  //activate handleKeyPress() \n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, []);\n\n  return <div \n          className={!show ?\"visible hidden\" : \"visible\"}>\n            <div className=\"visible__background\" onClick={closePopup} ></div>\n            {children}\n        </div>;\n}\n\nexport default Popup;\n","import React, { useState, useEffect } from 'react'\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\nimport IndividualPage from './IndividualPage'\nimport Popup from './Popup'\nimport '../style/ListPokemon.scss'\n\ninterface TypeArray {\n    type: {name: string},\n    element: {}\n}\n\ninterface Props {\n    name?: string,\n}\n\ninterface Pokemon {\n    id: number,\n    sprites: any,\n    types: Array<TypeArray>\n}\n\n\n/**\n * get a pokemon name and fetch their info from api to display in a card\n * @param name: string \n * @returns card diplaying info about pokemon\n */\nconst ListPokemon: React.FC<Props> = ({name}) => {\n    const [pokemon, setPokemon] = useState<Pokemon>() //data on a single pokemon\n    const [popup, setPopup] = useState(false)\n\n    //fetching data from individual page of pokmeon\n    const getPokemon = async() => {\n        const res = await axios.get(`pokemon/${name}`)\n\n        setPokemon(res.data);\n    }\n    \n    //Pop-up on/off\n    const popupOpen = () => {\n        setPopup(!popup)\n    }\n\n    useEffect(() => {\n        getPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [name])\n\n    \n    return (\n        <>\n        {/* ? : to wait for response for the data*/}\n\n        {pokemon ? \n        <div className='pokemon__card'>\n\n            <p className=\"pokemon__id\">#{pokemon.id}</p>\n\n            <div className=\"pokemon__sprite\">\n                <img src={pokemon.sprites.front_default} alt='sprite'/>\n            </div>\n\n            <h3 className=\"pokemon__name\">{name}</h3>\n\n            <div className=\"pokemon__type\">\n            {pokemon.types.map((element : {type: {name: string}}) =>\n                <p key={element.type.name} className={element.type.name}>{element.type.name}</p>\n                )}\n            </div>\n\n            <button className=\"pokemon__detail\" onClick={popupOpen}>More Details</button>\n\n        </div> \n        : <div className=\"pokemon__load-ctn\">\n            <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n        </div>\n            } \n\n        <Popup show={popup} setShow={setPopup} >\n\n        <div className=\"popup\">\n            <IndividualPage name={name} />\n        </div>\n        </Popup>\n        \n        </>\n    )\n}\n\nexport default ListPokemon\n","import React, {useState} from 'react'\nimport  axios  from 'axios'\nimport SuspenseElement from '../component/SuspenseElement';\nimport ListPokemon from '../component/ListPokemon';\nimport '../style/ListPokemon.scss'\n\nconst InfiniteScroll = React.lazy(() => import ('../component/InfiniteScroll'));\n\n\nexport default function Fetch() {\n    const [events, setEvents] = useState<any>([]);\n    const [currentPage, setCurrentPage] = useState(\"https://pokeapi.co/api/v2/pokemon\")\n    const [nextPage, setNextPage] = useState(\"\")\n    const [loading, setLoading] = useState(false)\n\n\n    //fetch the data from the current page of the api and set the nextPage\n    const getEvents = async() => {\n        \n        setLoading(true)\n        const response = await axios.get(currentPage) \n        const data = response.data;\n        const next = data.next;\n        setNextPage(await next) //add the value of the next page of the api to nextPage\n        \n        if (response && data.results) setEvents((prev: any)=>[...prev, ...data.results]); //check for response before adding results of the api to setEvents\n            \n        setLoading(false)\n    }\n    //set the current page to the new page and use then call getevents to fetch add more data\n    const hitBottom = async() => {\n        const getNext = (await axios.get(currentPage)).data.next //get the link for the next page\n        \n            setCurrentPage(getNext) //change the current page link into the next page from getNext\n            getEvents() //fetch more data and add them to events\n        \n        \n    }\n\n    const hasMoreData = nextPage !== null ? true : false\n    return (\n        <>\n        <h2 className='page-name'>Pok√©mon List</h2>\n        {/* Load InfinteScroll only when data had been fetched */ }\n        <SuspenseElement children={\n            <InfiniteScroll\n                onBottomHit={hitBottom}\n                hasMoreData={hasMoreData}\n                isLoading={loading}\n                loadOnMount={true}\n            >\n                {/* If \"events\" is not empty, use \".map\" to go through every result and display the, using \"ListPokemon\" */}\n                {(events.length === 0) ? 'loading' \n                : events.map((event: { name: string; })=>{\n                const name = `${event.name}`\n                return <ListPokemon name={name} key={event.name} />})}\n            </InfiniteScroll>\n        }/>\n            \n        <div className=\"end-page\"></div>\n        </>\n    )\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["show","setShow","children","handleKeyPress","e","code","preventDefault","useEffect","document","addEventListener","removeEventListener","className","onClick","name","useState","pokemon","setPokemon","popup","setPopup","getPokemon","axios","res","data","id","src","sprites","front_default","alt","types","map","element","type","loading","IndividualPage","InfiniteScroll","React","Fetch","events","setEvents","currentPage","setCurrentPage","nextPage","setNextPage","setLoading","getEvents","response","next","results","prev","hitBottom","getNext","hasMoreData","onBottomHit","isLoading","loadOnMount","length","event","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}