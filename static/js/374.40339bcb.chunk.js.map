{"version":3,"file":"static/js/374.40339bcb.chunk.js","mappings":"kOA6CA,EArC+B,SAAC,GAIzB,IAHHA,EAGE,EAHFA,KACAC,EAEE,EAFFA,QACAC,EACE,EADFA,SAYIC,EAAiB,SAACC,GAEP,WAAXA,EAAEC,MAAmBJ,EAAQD,GAAO,GAEzB,UAAXI,EAAEC,MAAkBD,EAAEE,kBAW5B,OAPAC,EAAAA,EAAAA,YAAU,WAER,OADAC,SAASC,iBAAiB,UAAWN,GAC9B,WACLK,SAASE,oBAAoB,UAAWP,MAEzC,KAEI,iBACCQ,UAAYX,EAAyB,UAAnB,iBADnB,WAEG,gBAAKW,UAAU,sBAAsBC,QAzB5B,WACjBX,EAAQD,GAAO,MAyBNE,MCiDb,G,OA9DqC,SAAC,GAAY,IAAXW,EAAU,EAAVA,KACnC,GAA8BC,EAAAA,EAAAA,YAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAU,mCAAG,oGACGC,EAAAA,EAAAA,IAAA,kBAAqBP,IADxB,OACTQ,EADS,OAGfL,EAAWK,EAAIC,MAHA,2CAAH,qDAiBhB,OANAf,EAAAA,EAAAA,YAAU,WACNY,MAED,CAACN,KAIA,gCAGCE,GACD,iBAAKJ,UAAU,gBAAf,WAEI,eAAGA,UAAU,cAAb,cAA6BI,EAAQQ,OAErC,gBAAKZ,UAAU,kBAAf,UACI,gBAAKa,IAAKT,EAAQU,QAAQC,cAAeC,IAAI,cAGjD,eAAIhB,UAAU,gBAAd,SAA+BE,KAE/B,gBAAKF,UAAU,gBAAf,SACCI,EAAQa,MAAMC,KAAI,SAACC,GAAD,OACf,cAA2BnB,UAAWmB,EAAQC,KAAKlB,KAAnD,SAA0DiB,EAAQC,KAAKlB,MAA/DiB,EAAQC,KAAKlB,YAIzB,mBAAQF,UAAU,kBAAkBC,QA/B1B,WACdM,GAAUD,IA8BN,8BAGF,gBAAKN,UAAU,oBAAf,UACE,gBAAKA,UAAU,mBAAf,UAAkC,gBAAKa,IAAKQ,EAAUL,IAAI,iBAI9D,SAAC,EAAD,CAAO3B,KAAMiB,EAAOhB,QAASiB,EAA7B,UAEA,gBAAKP,UAAU,QAAf,UACI,SAACsB,EAAA,EAAD,CAAgBpB,KAAMA,c,gHC9ClC,IA3BA,WACI,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOD,EAAP,KAAaqB,EAAb,KAQMC,EAAgB,mCAAG,oGACHf,EAAAA,EAAAA,IAAA,kBALVgB,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,KAItB,QACfjB,EADe,SAGVA,EAAIC,MAAMY,EAAQb,EAAIC,KAAKT,MAHjB,2CAAH,qDAUxB,OAJEN,EAAAA,EAAAA,YAAW,WACP4B,MAED,KAEH,8BACCtB,GAAQ,SAAC,IAAD,CAAgBA,KAAMA,KACvB,gBAAKF,UAAU,mBAAf,UAAkC,gBAAKa,IAAKQ,EAAUL,IAAI,kB,2LC6CtE,MApEA,WACI,OAA+Bb,EAAAA,EAAAA,UAAmB,IAAlD,eAAOyB,EAAP,KAAiBC,EAAjB,KACA,GAAoC1B,EAAAA,EAAAA,UAAS,IAA7C,eAAO2B,EAAP,KAAmBC,EAAnB,KACA,GAAwC5B,EAAAA,EAAAA,UAAmB,IAA3D,eAAO6B,EAAP,KAAqBC,EAArB,KACA,GAAsC9B,EAAAA,EAAAA,UAAS,qCAA/C,eAAO+B,EAAP,KAAoBC,EAApB,KACA,GAA0BhC,EAAAA,EAAAA,UAAS,IAAnC,eAAOiC,EAAP,KAAcC,EAAd,KAEMC,EAAQ,mCAAG,wGACU7B,EAAAA,EAAAA,IAAUyB,GADpB,OACPK,EADO,OAEP5B,EAAO4B,EAAS5B,KAAK6B,QACrBC,EAAOF,EAAS5B,KAAK8B,KAC3BV,EAAcpB,EAAKO,KAAI,SAACzB,GACpB,OAAOA,EAAES,SAGTqC,GAAqB,OAATE,IACZN,EAAeM,GACfZ,GAAY,SAACa,GAAD,wBAAsBA,IAAtB,OAA+BZ,QAVlC,2CAAH,qDA8BhB,OAVElC,EAAAA,EAAAA,YAAU,WACN0C,MACD,CAACJ,KAEJtC,EAAAA,EAAAA,YAAU,WACHwC,EAAMO,QAAU,GACnBV,EAAgBL,EAASgB,QAAO,SAAC1C,GAAD,OAA6BA,EAAK2C,SAAST,EAAMU,kBAAgB5B,KAAI,SAAA6B,GACjG,OAAOA,QAEZ,CAACX,KAEF,iCACA,eAAIpC,UAAU,YAAd,oCACE,iBAAKA,UAAU,YAAf,WACI,kBAAOgD,QAAQ,SAAf,UAAyB,SAAC,MAAD,OACzB,kBAAO5B,KAAK,OAAOR,GAAG,SAASqC,YAAY,2BAAwBC,SArB5D,SAACzD,GACZ0D,YAAY,WACRd,EAAS5C,EAAE2D,OAAOC,SACnB,YAoBH,gBAAKrD,UAAU,UAAf,SACkC,IAAxBgC,EAAaW,QACb,gBAAK3C,UAAU,oBAAf,UACE,UAACsD,EAAA,EAAD,CAAUC,QAAQ,OAAOC,UAAU,EAAOC,OAAK,EAA/C,WACI,SAACH,EAAA,OAAD,WACI,SAACI,EAAA,EAAD,OAEJ,SAACJ,EAAA,OAAD,WACI,SAACI,EAAA,EAAD,OAEJ,SAACJ,EAAA,OAAD,WACI,SAACI,EAAA,EAAD,WAIV1B,EAAad,KAAI,SAACzB,EAAWkE,GAC3B,OAAO,SAACC,EAAA,EAAD,CAAyB1D,KAAMT,GAAbkE,a,gGChE9B,SAASE,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,EAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAAmD,MAAzBD,EAAKC,OAAOC,WAA2C,MAAtBF,EAAK,cAAuB,OAAOH,MAAMM,KAAKH,GFInF,CAAgBJ,KAAQ,EAAAQ,EAAA,GAA2BR,IGLvE,WACb,MAAM,IAAIS,UAAU,wIHIwE","sources":["component/Popup.tsx","component/ListPokemon.tsx","component/RandomSelector.tsx","pages/SearchBar.tsx","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../javascript/esm|/home/fred/pokedex-react/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport \"../style/popup.scss\"\n\ninterface Props {\n    show: boolean\n    setShow: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst Popup: React.FC<Props> = ({\n    show,\n    setShow,\n    children\n}) => {\n\n  //close popup\n  const closePopup = () => {\n    setShow(show = false)\n  }\n\n  /**\n   * detect key press and handle key element\n   * @param e \n   */\n  const handleKeyPress = (e: KeyboardEvent) => {\n    //@ts-ignore\n    if (e.code === \"Escape\") setShow(show = false); //on \"Escape\" close the popup\n    //@ts-ignore\n    if (e.code === \"Enter\") e.preventDefault(); // prevent \"Enter\" from opening and closing Individual page\n  };\n\n  //activate handleKeyPress() \n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyPress);\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, []);\n\n  return <div \n          className={!show ?\"visible hidden\" : \"visible\"}>\n            <div className=\"visible__background\" onClick={closePopup} ></div>\n            {children}\n        </div>;\n}\n\nexport default Popup;\n","import React, { useState, useEffect } from 'react'\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\nimport IndividualPage from './IndividualPage'\nimport Popup from './Popup'\nimport '../style/ListPokemon.scss'\n\ninterface TypeArray {\n    type: {name: string},\n    element: {}\n}\n\ninterface Props {\n    name?: string,\n}\n\ninterface Pokemon {\n    id: number,\n    sprites: any,\n    types: Array<TypeArray>\n}\n\n\n/**\n * get a pokemon name and fetch their info from api to display in a card\n * @param name: string \n * @returns card diplaying info about pokemon\n */\nconst ListPokemon: React.FC<Props> = ({name}) => {\n    const [pokemon, setPokemon] = useState<Pokemon>() //data on a single pokemon\n    const [popup, setPopup] = useState(false)\n\n    //fetching data from individual page of pokmeon\n    const getPokemon = async() => {\n        const res = await axios.get(`pokemon/${name}`)\n\n        setPokemon(res.data);\n    }\n    \n    //Pop-up on/off\n    const popupOpen = () => {\n        setPopup(!popup)\n    }\n\n    useEffect(() => {\n        getPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [name])\n\n    \n    return (\n        <>\n        {/* ? : to wait for response for the data*/}\n\n        {pokemon ? \n        <div className='pokemon__card'>\n\n            <p className=\"pokemon__id\">#{pokemon.id}</p>\n\n            <div className=\"pokemon__sprite\">\n                <img src={pokemon.sprites.front_default} alt='sprite'/>\n            </div>\n\n            <h3 className=\"pokemon__name\">{name}</h3>\n\n            <div className=\"pokemon__type\">\n            {pokemon.types.map((element : {type: {name: string}}) =>\n                <p key={element.type.name} className={element.type.name}>{element.type.name}</p>\n                )}\n            </div>\n\n            <button className=\"pokemon__detail\" onClick={popupOpen}>More Details</button>\n\n        </div> \n        : <div className=\"pokemon__load-ctn\">\n            <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n        </div>\n            } \n\n        <Popup show={popup} setShow={setPopup} >\n\n        <div className=\"popup\">\n            <IndividualPage name={name} />\n        </div>\n        </Popup>\n        \n        </>\n    )\n}\n\nexport default ListPokemon\n","import React, { useState, useEffect } from 'react';\nimport IndividualPage from './IndividualPage';\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\n\n/**\n * Create a random number to select a pokemon and fetch pokemon from the api info\n * @returns individualPage with a random pokemon\n */\nfunction RandomSelector() {\n    const [name, setName] = useState()\n\n    //generate a random number between 1 and 810\n    const randomNumber = () => {\n        let x = Math.floor((Math.random() * 810) + 1)\n        return x\n    }\n    //fetch inforamtion from a random pokemon \n    const getRandomPokemon = async() => {\n        const res = await axios.get(`pokemon/${randomNumber()}`)\n\n        if (res && res.data) setName(res.data.name)\n    }\n\n    useEffect (() => {\n        getRandomPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  return (\n    <>\n    {name ?  <IndividualPage name={name}/>\n          : <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>}\n    </>\n  )\n}\n\nexport default RandomSelector;\n","import React, { useEffect, useState } from 'react'\nimport { axios } from '../javascript/axios'\nimport ListPokemon from '../component/ListPokemon'\nimport Carousel from 'react-bootstrap/Carousel';\nimport RandomSelector from '../component/RandomSelector';\nimport { FiSearch } from 'react-icons/fi'\nimport '../style/searchbar.scss'\n\nfunction SearchBar() {\n    const [pokeName, setPokeName] =useState<string[]>([])\n    const [nameHolder, setNameHolder] = useState([])\n    const [filteredList, setFilteredList] = useState<string[]>([])\n    const [currentPage, setCurrentPage] = useState(\"https://pokeapi.co/api/v2/pokemon\")\n    const [query, setQuery] = useState('')\n\n    const getPokes = async() => {\n        const response = await axios.get(currentPage) \n        const data = response.data.results;\n        const next = response.data.next\n        setNameHolder(data.map((e: { name: string }) => {\n            return e.name\n        }))\n\n        if (response && next !== null) {\n            setCurrentPage(next)\n            setPokeName((prev: string[])=>[...prev, ...nameHolder])\n        } \n    }\n\n    const search = (e: { target: { value: React.SetStateAction<string>; }; }) => {\n        setTimeout (function () {\n            setQuery(e.target.value)         \n        }, 2000)\n    }\n\n    useEffect(() => {\n        getPokes()\n    }, [currentPage])\n\n    useEffect(() => {\n        if(query.length >= 3){\n        setFilteredList(pokeName.filter((name: string | string[]) => name.includes(query.toLowerCase())).map(filtered => {\n            return filtered\n        }))}\n    }, [query])\n  return (\n      <>\n      <h2 className='page-name'>Search for Pokémon</h2>\n        <div className=\"searchbar\">\n            <label htmlFor=\"search\">{<FiSearch/>}</label>\n            <input type=\"text\" id='search' placeholder='Enter Pokémon name...' onChange={search} />\n        </div>\n        <div className=\"pokemon\">\n                {(filteredList.length === 0) \n                ? <div className=\"pokemon__carousel\">\n                    <Carousel variant=\"dark\" controls={false} touch>\n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                        <Carousel.Item>\n                            <RandomSelector />\n                        </Carousel.Item> \n                    </Carousel>\n                    </div>\n                : filteredList.map((e: string, index: React.Key | null | undefined) => {\n                    return <ListPokemon key={index} name={e}/>\n                })}\n            </div>\n      </>\n    \n  )\n}\n\nexport default SearchBar","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["show","setShow","children","handleKeyPress","e","code","preventDefault","useEffect","document","addEventListener","removeEventListener","className","onClick","name","useState","pokemon","setPokemon","popup","setPopup","getPokemon","axios","res","data","id","src","sprites","front_default","alt","types","map","element","type","loading","IndividualPage","setName","getRandomPokemon","Math","floor","random","pokeName","setPokeName","nameHolder","setNameHolder","filteredList","setFilteredList","currentPage","setCurrentPage","query","setQuery","getPokes","response","results","next","prev","length","filter","includes","toLowerCase","filtered","htmlFor","placeholder","onChange","setTimeout","target","value","Carousel","variant","controls","touch","RandomSelector","index","ListPokemon","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}