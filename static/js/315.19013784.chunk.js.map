{"version":3,"file":"static/js/315.19013784.chunk.js","mappings":"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","sources":["component/RandomSelector.tsx","component/ButtonFetch.tsx","component/TypeFetch.tsx","component/ListMoves.tsx","component/SmallPokemonList.tsx","pages/MoveDex.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport IndividualPage from './IndividualPage';\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\n\n/**\n * Create a random number to select a pokemon and fetch pokemon from the api info\n * @returns individualPage with a random pokemon\n */\nfunction RandomSelector() {\n    const [name, setName] = useState()\n\n    //generate a random number between 1 and 810\n    const randomNumber = () => {\n        let x = Math.floor((Math.random() * 810) + 1)\n        return x\n    }\n    //fetch inforamtion from a random pokemon \n    const getRandomPokemon = async() => {\n        const res = await axios.get(`pokemon/${randomNumber()}`)\n\n        if (res && res.data) setName(res.data.name)\n    }\n\n    useEffect (() => {\n        getRandomPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  return (\n    <>\n    {name ?  <IndividualPage name={name}/>\n          : <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>}\n    </>\n  )\n}\n\nexport default RandomSelector;\n","import React from 'react';\nimport { axios } from '../javascript/axios';\n\ninterface Props {\n    name: string\n    setPokemon: any\n    item: string\n}\n\n/**\n * fetch data depending on the appropiate page from the api\n * @param param0 \n * @returns appropriate data page\n */\nconst ButtonFetch: React.FC<Props> = ({ name, setPokemon, item }) => {\n    /**\n     * fetch data in the appropriate given page set up by item\n     */\n    const loadList = async() => {\n        const res = await axios.get(`type/${name}`)\n\n        if (item === \"pokemon\") setPokemon(res.data.pokemon)\n        if (item === \"moves\") setPokemon(res.data.moves)\n    }\n\n    return <button className={name} onClick={loadList}>{name}</button>;\n}\n\nexport default ButtonFetch;\n","import React, { useState, useEffect } from 'react';\nimport { axios } from '../javascript/axios.js'\nimport ButtonFetch from '../component/ButtonFetch';\n\ninterface Props {\n    setTopList: React.Dispatch<React.SetStateAction<never[]>>\n    item: string\n}\n\n/**\n * fetch list of types and dipley them as buttons\n */\nconst TypeFetch: React.FC<Props> = ({ setTopList, item }) => {\n    const [type, setType] = useState([])\n    const [list, setList] = useState([])\n\n\n    const getPokemon = async() => {\n        const res = await axios.get(`type`)\n\n        setType(res.data.results);\n    }\n\n    useEffect(() => {\n        setTopList(list)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [list])\n\n    useEffect (() => {\n        getPokemon()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n  return (\n      <>\n    <div className=\"type-page\">\n    {(type.length === 0) ? 'loading' : type.map((data: { name: string; })=> {\n        return (\n            <div key={data.name} className=\"type-page__type\">\n                <ButtonFetch name={data.name} setPokemon={setList} item={item} />\n\n            </div>\n        )\n    })}\n</div>\n    </>\n  )\n}\n\nexport default TypeFetch;\n","import React, { useState, useEffect } from 'react';\nimport { axios } from '../javascript/axios.js'\nimport loading from '../img/loading.gif'\n\ninterface Props {\n    name:string\n    setPage: React.Dispatch<React.SetStateAction<boolean>>\n    setPokemon: React.Dispatch<any>\n}\n\ninterface FlavorText {\n    flavor_text: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined;\n    version_group: { name: string; }\n    language: { name: string; }\n    text: {}\n}\n\ninterface Move {\n    type: {name: string}\n    damage_class: {name: string}\n    flavor_text_entries: Array<FlavorText>\n    power: number\n    pp: number\n    accuracy: number\n    learned_by_pokemon: {}\n}\n\n/**\n * fetch data and display specific info of a move \n * @returns move's inforamtions card\n */\nconst ListMoves: React.FC<Props> = ({\n    name, \n    setPage, \n    setPokemon\n    }) => {\n    const [move, setMove] = useState<Move>()\n\n    //fetching data from individual page of moves\n    const getMove = async() => {\n        const res = await axios.get(`move/${name}`)\n        setMove(res.data);\n    }\n\n    useEffect(() => {\n        getMove()\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    let flavor = move?.flavor_text_entries\n    \n    //filter out non english flavor text\n    const englishFilter = (text: { version_group: { name: string; }; language: { name: string; }; flavor_text: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\n        if (text.version_group.name === \"sword-shield\" && text.language.name === \"en\") {\n            return <p key={text.language.name}>{text.flavor_text}</p>\n        }\n    }\n\n    const loadPokemon = () => {\n        setPokemon(move?.learned_by_pokemon)\n        setPage(true)\n    }\n\n\n  return (\n      <>\n      {move \n        // eslint-disable-next-line no-useless-concat\n        ? <div className={\"move\" + \" \" + move.damage_class.name}>\n            <div className=\"move__header\">\n            <div className=\"move__type\">\n                <h3 className={move.type.name}>{name}</h3>\n            </div>\n                <div className=\"move__damage-class\">\n                    <p className=\"move__damage-class-type\">{move.damage_class.name}</p>\n                </div>\n            </div>\n            \n\n            <div className=\"move__flavor-text\">\n                {flavor?.map(englishFilter)}\n            </div>\n            <div className=\"move__lower\">\n                <div className=\"move__stats\">\n                    <div className=\"move__power\">\n                        {move.power === null ? <p>Power: - </p> : <p>power: {move.power}</p>}\n                    </div>\n                    <div className=\"move__accuracy\">\n                        {move.accuracy === null ? <p>Accuracy: - </p> : <p>Accuracy: {move.accuracy}</p>}                \n                    </div>\n                    <div className=\"move__pp\">\n                        <p>PP: {move.pp}</p>\n                    </div>\n                </div>\n                <div className=\"move__button\">\n                    <button onClick={loadPokemon}>Learned By...</button>\n                </div>\n            </div>\n        </div> \n\n        : <div className=\"pokemon__load-ctn\">\n        <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n        </div>\n\n        }\n      </>\n  );\n}\n\nexport default ListMoves;\n","import React, { useEffect, useState } from 'react';\nimport { axios } from \"../javascript/axios.js\"\nimport loading from '../img/loading.gif'\n\ninterface Props {\n    name: string | undefined\n}\n\ninterface Pokemon {\n    sprites: any\n    length: {}\n}\n\nconst SmallPokemonList: React.FC<Props> = ({ name }) => {\n    const [pokemon, setPokemon] = useState<Pokemon>()\n\n    /**\n     * fetch pokemon data using the name given\n     */\n    const getPokemon = async() => {\n        const res = await axios.get(`pokemon/${name}`)\n        setPokemon(res.data);\n    }\n\n    useEffect (() => {\n        getPokemon()\n        window.scrollTo(0, 0)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n  return (\n      <>\n      {pokemon?.length === 0\n       \n      ? <div className=\"pokemon__load-ctn\">\n            <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n        </div>\n\n      : <div className=\"move__pokemon\">\n        <div className=\"move__pokemon-sprtie\">\n            {pokemon?.sprites.length === 0 ? \"loading\" : <img src={pokemon?.sprites.front_default} alt='sprite'/>}\n        </div>\n        <h3 className='move__pokemon-name'>{name}</h3>\n        </div>\n}\n      </>\n  );\n}\n\nexport default SmallPokemonList;\n","import React, { useState, useEffect } from 'react';\nimport TypeFetch from '../component/TypeFetch';\nimport ListMoves from '../component/ListMoves';\nimport { Carousel } from 'react-bootstrap';\nimport RandomSelector from '../component/RandomSelector';\nimport SmallPokemonList from '../component/SmallPokemonList';\nimport '../style/movedex.scss'\nimport { axios } from '../javascript/axios';\nimport loading from '../img/loading.gif'\n\n\nfunction MoveDex() {\n    const [list, setList] = useState([])\n    const [moveList, setMoveList] = useState<any>([])\n    const [page, setPage] = useState(false)\n    const [physicalType, setPhysicalType] = useState(false)\n    const [physicalLocke, setPhysicalLocke] = useState(false)\n    const [specialType, setSpecialType] = useState(false)\n    const [specialLocke, setSpecialLocke] = useState(false)\n    const [statusType, setStatusType] = useState(false)\n    const [statusLocke, setStatusLocke] = useState(false)\n    const [pokemon, setPokemon] = useState([])\n\n    const item = \"moves\"\n\n    const backToPage = () => setPage(false)\n\n\n    const pokesMove = async(attack: { url: string; }) => {\n        const result = await axios.get(attack.url)\n        return result.data}\n\n    const pokemonInMove = async() => {\n        const getPokes = await Promise.all(list.map(pokesMove))\n        setMoveList(getPokes)\n    }\n\n    useEffect (()=> {\n        pokemonInMove()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [list])\n\n    /**\n     * Set all filter to false\n     */\n    const noFilter = () => {\n        setPhysicalLocke(false)\n        setSpecialLocke(false)\n        setStatusLocke(false)\n        setPhysicalType(false)\n        setSpecialType(false)\n        setStatusType(false)\n    }\n\n    //filter to show physical attacks\n    const filterPhysical = () => {          //set physical lock to opposite at each button press\n\n        if (specialLocke) {                         //if specialLock is true, only filter out status\n            setStatusType(true)\n            setPhysicalType(false)\n            if (physicalLocke) setPhysicalType(true)\n        } \n        else if (statusLocke) {                     //if status is true, only filter out special\n            setSpecialType(true) \n            setPhysicalType(false)\n            if (physicalLocke) setPhysicalType(true)\n        } else {                                   //else filter out special et status\n            setSpecialType(true)\n            setStatusType(true)\n            if (physicalLocke) {\n                setSpecialType(false)\n                setStatusType(false)\n            }\n        }\n        setPhysicalLocke(!physicalLocke) \n    }\n\n    //filter to show special attack\n    const filterSpecial = () => {\n\n        if (physicalLocke) {\n        setStatusType(true)\n        setSpecialType(false)\n        if (specialLocke) setSpecialType(true)\n        }\n        else if (statusLocke) {\n        setPhysicalType(true)\n        setSpecialType(false)\n        if (specialLocke) setSpecialType(true)\n        } else {\n            setPhysicalType(true)\n            setStatusType(true)\n            if (specialLocke) {\n                setPhysicalType(false)\n                setStatusType(false)\n            }\n        }\n        setSpecialLocke(!specialLocke)\n    }\n\n    //filter to show status attack\n    const filterStatus = () => {\n        \n        if (specialLocke) {\n        setPhysicalType(true)\n        setStatusType(false)\n        if (statusLocke) setStatusType(true)\n        }\n        else if (physicalLocke) {\n        setSpecialType(true)\n        setStatusType(false)\n        if (statusLocke) setStatusType(true)\n        } else {\n            setSpecialType(true)\n            setPhysicalType(true)\n            if (statusLocke) {\n                setSpecialType(false)\n                setPhysicalType(false)\n            }\n        }\n\n        setStatusLocke(!statusLocke)\n    }\n\n    useEffect (() => {\n        setPage(false)\n        noFilter()\n    }, [list])\n\n    /**\n     * filterout move list based on their class and active locks\n     * @param element : {damage_class : {name: string}}\n     * @returns filtered list based on attack class\n     */\n    const filterDamageClass = ((element: { damage_class: { name: string; }}) => {\n\n        if (physicalType === false && specialType === true && statusType === true) {\n            return  element.damage_class.name === \"physical\"\n        }\n        \n         if (specialType === false && physicalType === true && statusType === true ) {\n            return element.damage_class.name === \"special\"\n        }\n        \n         if (statusType === false && physicalType === true && specialType === true) {          \n            return  element.damage_class.name === \"status\"\n        }\n        \n         if (specialType === false && physicalType === false && statusType === true ) {         \n            return (element.damage_class.name === \"special\" || element.damage_class.name === \"physical\")\n        }\n        \n         if (specialType === false && statusType === false && physicalType === true ) {            \n            return (element.damage_class.name === \"special\" || element.damage_class.name === \"status\")\n        }\n        \n         if (physicalType === false && statusType === false && specialType === true ) {\n            return (element.damage_class.name === \"physical\" || element.damage_class.name === \"status\")\n        }\n         if (physicalType === false && statusType === false && specialType === false ) {\n            return (element.damage_class.name === \"physical\" || element.damage_class.name === \"status\" || element.damage_class.name === \"special\")\n        }\n    })\n\n    useEffect(() => {\n        if (physicalLocke && specialLocke && statusLocke) noFilter()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [physicalLocke, specialLocke, statusLocke])\n\n    return (\n    <>\n        <h2 className='page-name'>Move List</h2>\n        \n        <div className=\"type-container\">\n            <TypeFetch setTopList={setList} item={item} />\n        </div>\n\n        <div className=\"move-dex\">\n                {(list.length === 0) \n                ? <Carousel variant=\"dark\" controls={false} touch>\n                    <Carousel.Item>\n                        <RandomSelector />\n                    </Carousel.Item> \n                    <Carousel.Item>\n                        <RandomSelector />\n                    </Carousel.Item> \n                    <Carousel.Item>\n                        <RandomSelector />\n                    </Carousel.Item> \n                </Carousel>\n                : !page ? <div className=\"move-dex__list-page\">\n                                <div className=\"move-dex__filter\">\n                                    <div className=\"move-dex__filter-container\">\n                                        <button \n                                        className={!physicalLocke ? \"move-dex__physical\" : \"move-dex__physicalLock\"} \n                                        onClick={filterPhysical}\n                                        >Physical</button>\n                                        <button \n                                        className={!specialLocke ? \"move-dex__special\" : \"move-dex__specialLock\"} \n                                        onClick={filterSpecial} \n                                        >Special</button>\n                                        <button \n                                        className={!statusLocke ? \"move-dex__status\" : \"move-dex__statusLock\"} \n                                        onClick={filterStatus} \n                                        >Status</button>\n                                    </div>\n                                </div>\n                                <div className=\"move-dex__move-container\">\n                                {moveList.length === 0 \n                                ? <div className=\"pokemon__load-ctn\">\n                                    <div className='pokemon__loading'><img src={loading}  alt=\"loading\" /></div>\n                                </div>\n                                : moveList.filter(filterDamageClass).map((element: { name: string }) => \n                                    <ListMoves \n                                    name={element.name} \n                                    key={element.name} \n                                    setPage={setPage} \n                                    setPokemon={setPokemon}\n                                    />\n                                )}</div>\n                            </div>\n                        : <div className=\"move-dex__pokemon\">\n                            <button className='move-dex__return-btn' onClick={backToPage}>return</button>\n                            {pokemon.map((pokes: { name: string | undefined; }) => \n                             <SmallPokemonList name={pokes.name} key={pokes.name} />)}\n                        </div>\n            }\n            </div>\n    </>\n    )\n}\n\nexport default MoveDex;\n"],"names":["useState","name","setName","getRandomPokemon","axios","Math","floor","random","res","data","useEffect","className","src","loading","alt","setPokemon","item","loadList","pokemon","moves","onClick","setTopList","type","setType","list","setList","getPokemon","results","length","map","setPage","move","setMove","getMove","flavor","flavor_text_entries","damage_class","text","version_group","language","flavor_text","power","accuracy","pp","learned_by_pokemon","window","scrollTo","sprites","front_default","moveList","setMoveList","page","physicalType","setPhysicalType","physicalLocke","setPhysicalLocke","specialType","setSpecialType","specialLocke","setSpecialLocke","statusType","setStatusType","statusLocke","setStatusLocke","pokesMove","attack","url","result","pokemonInMove","Promise","all","getPokes","noFilter","TypeFetch","Carousel","variant","controls","touch","RandomSelector","pokes","filter","element"],"sourceRoot":""}